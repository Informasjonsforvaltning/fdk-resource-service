// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     dataset_schema.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type DatasetEventType int32

const (
	DatasetEventTypeDATASET_HARVESTED DatasetEventType = 0
	DatasetEventTypeDATASET_REASONED  DatasetEventType = 1
	DatasetEventTypeDATASET_REMOVED   DatasetEventType = 2
)

func (e DatasetEventType) String() string {
	switch e {
	case DatasetEventTypeDATASET_HARVESTED:
		return "DATASET_HARVESTED"
	case DatasetEventTypeDATASET_REASONED:
		return "DATASET_REASONED"
	case DatasetEventTypeDATASET_REMOVED:
		return "DATASET_REMOVED"
	}
	return "unknown"
}

func writeDatasetEventType(r DatasetEventType, w io.Writer) error {
	return vm.WriteInt(int32(r), w)
}

func NewDatasetEventTypeValue(raw string) (r DatasetEventType, err error) {
	switch raw {
	case "DATASET_HARVESTED":
		return DatasetEventTypeDATASET_HARVESTED, nil
	case "DATASET_REASONED":
		return DatasetEventTypeDATASET_REASONED, nil
	case "DATASET_REMOVED":
		return DatasetEventTypeDATASET_REMOVED, nil
	}

	return -1, fmt.Errorf("invalid value for DatasetEventType: '%s'", raw)

}

func (b DatasetEventType) MarshalJSON() ([]byte, error) {
	return json.Marshal(b.String())
}

func (b *DatasetEventType) UnmarshalJSON(data []byte) error {
	var stringVal string
	err := json.Unmarshal(data, &stringVal)
	if err != nil {
		return err
	}
	val, err := NewDatasetEventTypeValue(stringVal)
	*b = val
	return err
}

type DatasetEventTypeWrapper struct {
	Target *DatasetEventType
}

func (b DatasetEventTypeWrapper) SetBoolean(v bool) {
	panic("Unable to assign boolean to int field")
}

func (b DatasetEventTypeWrapper) SetInt(v int32) {
	*(b.Target) = DatasetEventType(v)
}

func (b DatasetEventTypeWrapper) SetLong(v int64) {
	panic("Unable to assign long to int field")
}

func (b DatasetEventTypeWrapper) SetFloat(v float32) {
	panic("Unable to assign float to int field")
}

func (b DatasetEventTypeWrapper) SetUnionElem(v int64) {
	panic("Unable to assign union elem to int field")
}

func (b DatasetEventTypeWrapper) SetDouble(v float64) {
	panic("Unable to assign double to int field")
}

func (b DatasetEventTypeWrapper) SetBytes(v []byte) {
	panic("Unable to assign bytes to int field")
}

func (b DatasetEventTypeWrapper) SetString(v string) {
	panic("Unable to assign string to int field")
}

func (b DatasetEventTypeWrapper) Get(i int) types.Field {
	panic("Unable to get field from int field")
}

func (b DatasetEventTypeWrapper) SetDefault(i int) {
	panic("Unable to set default on int field")
}

func (b DatasetEventTypeWrapper) AppendMap(key string) types.Field {
	panic("Unable to append map key to from int field")
}

func (b DatasetEventTypeWrapper) AppendArray() types.Field {
	panic("Unable to append array element to from int field")
}

func (b DatasetEventTypeWrapper) NullField(int) {
	panic("Unable to null field in int field")
}

func (b DatasetEventTypeWrapper) HintSize(int) {
	panic("Unable to hint size in int field")
}

func (b DatasetEventTypeWrapper) Finalize() {}
