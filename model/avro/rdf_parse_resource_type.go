// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     parsed.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type RdfParseResourceType int32

const (
	RdfParseResourceTypeDATASET          RdfParseResourceType = 0
	RdfParseResourceTypeDATASERVICE      RdfParseResourceType = 1
	RdfParseResourceTypeCONCEPT          RdfParseResourceType = 2
	RdfParseResourceTypeINFORMATIONMODEL RdfParseResourceType = 3
	RdfParseResourceTypeSERVICE          RdfParseResourceType = 4
	RdfParseResourceTypeEVENT            RdfParseResourceType = 5
)

func (e RdfParseResourceType) String() string {
	switch e {
	case RdfParseResourceTypeDATASET:
		return "DATASET"
	case RdfParseResourceTypeDATASERVICE:
		return "DATASERVICE"
	case RdfParseResourceTypeCONCEPT:
		return "CONCEPT"
	case RdfParseResourceTypeINFORMATIONMODEL:
		return "INFORMATIONMODEL"
	case RdfParseResourceTypeSERVICE:
		return "SERVICE"
	case RdfParseResourceTypeEVENT:
		return "EVENT"
	}
	return "unknown"
}

func writeRdfParseResourceType(r RdfParseResourceType, w io.Writer) error {
	return vm.WriteInt(int32(r), w)
}

func NewRdfParseResourceTypeValue(raw string) (r RdfParseResourceType, err error) {
	switch raw {
	case "DATASET":
		return RdfParseResourceTypeDATASET, nil
	case "DATASERVICE":
		return RdfParseResourceTypeDATASERVICE, nil
	case "CONCEPT":
		return RdfParseResourceTypeCONCEPT, nil
	case "INFORMATIONMODEL":
		return RdfParseResourceTypeINFORMATIONMODEL, nil
	case "SERVICE":
		return RdfParseResourceTypeSERVICE, nil
	case "EVENT":
		return RdfParseResourceTypeEVENT, nil
	}

	return -1, fmt.Errorf("invalid value for RdfParseResourceType: '%s'", raw)

}

func (b RdfParseResourceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(b.String())
}

func (b *RdfParseResourceType) UnmarshalJSON(data []byte) error {
	var stringVal string
	err := json.Unmarshal(data, &stringVal)
	if err != nil {
		return err
	}
	val, err := NewRdfParseResourceTypeValue(stringVal)
	*b = val
	return err
}

type RdfParseResourceTypeWrapper struct {
	Target *RdfParseResourceType
}

func (b RdfParseResourceTypeWrapper) SetBoolean(v bool) {
	panic("Unable to assign boolean to int field")
}

func (b RdfParseResourceTypeWrapper) SetInt(v int32) {
	*(b.Target) = RdfParseResourceType(v)
}

func (b RdfParseResourceTypeWrapper) SetLong(v int64) {
	panic("Unable to assign long to int field")
}

func (b RdfParseResourceTypeWrapper) SetFloat(v float32) {
	panic("Unable to assign float to int field")
}

func (b RdfParseResourceTypeWrapper) SetUnionElem(v int64) {
	panic("Unable to assign union elem to int field")
}

func (b RdfParseResourceTypeWrapper) SetDouble(v float64) {
	panic("Unable to assign double to int field")
}

func (b RdfParseResourceTypeWrapper) SetBytes(v []byte) {
	panic("Unable to assign bytes to int field")
}

func (b RdfParseResourceTypeWrapper) SetString(v string) {
	panic("Unable to assign string to int field")
}

func (b RdfParseResourceTypeWrapper) Get(i int) types.Field {
	panic("Unable to get field from int field")
}

func (b RdfParseResourceTypeWrapper) SetDefault(i int) {
	panic("Unable to set default on int field")
}

func (b RdfParseResourceTypeWrapper) AppendMap(key string) types.Field {
	panic("Unable to append map key to from int field")
}

func (b RdfParseResourceTypeWrapper) AppendArray() types.Field {
	panic("Unable to append array element to from int field")
}

func (b RdfParseResourceTypeWrapper) NullField(int) {
	panic("Unable to null field in int field")
}

func (b RdfParseResourceTypeWrapper) HintSize(int) {
	panic("Unable to hint size in int field")
}

func (b RdfParseResourceTypeWrapper) Finalize() {}
