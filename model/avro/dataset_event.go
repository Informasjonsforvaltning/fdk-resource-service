// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     dataset_schema.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type DatasetEvent struct {
	Type DatasetEventType `json:"type"`

	FdkId string `json:"fdkId"`

	Graph string `json:"graph"`

	Timestamp int64 `json:"timestamp"`
}

const DatasetEventAvroCRC64Fingerprint = "_Ù”~)\xb6\xdeB"

func NewDatasetEvent() DatasetEvent {
	r := DatasetEvent{}
	return r
}

func DeserializeDatasetEvent(r io.Reader) (DatasetEvent, error) {
	t := NewDatasetEvent()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeDatasetEventFromSchema(r io.Reader, schema string) (DatasetEvent, error) {
	t := NewDatasetEvent()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeDatasetEvent(r DatasetEvent, w io.Writer) error {
	var err error
	err = writeDatasetEventType(r.Type, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.FdkId, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Graph, w)
	if err != nil {
		return err
	}
	err = vm.WriteLong(r.Timestamp, w)
	if err != nil {
		return err
	}
	return err
}

func (r DatasetEvent) Serialize(w io.Writer) error {
	return writeDatasetEvent(r, w)
}

func (r DatasetEvent) Schema() string {
	return "{\"fields\":[{\"name\":\"type\",\"type\":{\"name\":\"DatasetEventType\",\"symbols\":[\"DATASET_HARVESTED\",\"DATASET_REASONED\",\"DATASET_REMOVED\"],\"type\":\"enum\"}},{\"name\":\"fdkId\",\"type\":\"string\"},{\"name\":\"graph\",\"type\":\"string\"},{\"logicalType\":\"timestamp-millis\",\"name\":\"timestamp\",\"type\":\"long\"}],\"name\":\"no.fdk.dataset.DatasetEvent\",\"type\":\"record\"}"
}

func (r DatasetEvent) SchemaName() string {
	return "no.fdk.dataset.DatasetEvent"
}

func (_ DatasetEvent) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ DatasetEvent) SetInt(v int32)       { panic("Unsupported operation") }
func (_ DatasetEvent) SetLong(v int64)      { panic("Unsupported operation") }
func (_ DatasetEvent) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ DatasetEvent) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ DatasetEvent) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ DatasetEvent) SetString(v string)   { panic("Unsupported operation") }
func (_ DatasetEvent) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *DatasetEvent) Get(i int) types.Field {
	switch i {
	case 0:
		w := DatasetEventTypeWrapper{Target: &r.Type}

		return w

	case 1:
		w := types.String{Target: &r.FdkId}

		return w

	case 2:
		w := types.String{Target: &r.Graph}

		return w

	case 3:
		w := types.Long{Target: &r.Timestamp}

		return w

	}
	panic("Unknown field index")
}

func (r *DatasetEvent) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *DatasetEvent) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ DatasetEvent) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ DatasetEvent) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ DatasetEvent) HintSize(int)                     { panic("Unsupported operation") }
func (_ DatasetEvent) Finalize()                        {}

func (_ DatasetEvent) AvroCRC64Fingerprint() []byte {
	return []byte(DatasetEventAvroCRC64Fingerprint)
}

func (r DatasetEvent) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["type"], err = json.Marshal(r.Type)
	if err != nil {
		return nil, err
	}
	output["fdkId"], err = json.Marshal(r.FdkId)
	if err != nil {
		return nil, err
	}
	output["graph"], err = json.Marshal(r.Graph)
	if err != nil {
		return nil, err
	}
	output["timestamp"], err = json.Marshal(r.Timestamp)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *DatasetEvent) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["type"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Type); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for type")
	}
	val = func() json.RawMessage {
		if v, ok := fields["fdkId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.FdkId); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for fdkId")
	}
	val = func() json.RawMessage {
		if v, ok := fields["graph"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Graph); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for graph")
	}
	val = func() json.RawMessage {
		if v, ok := fields["timestamp"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Timestamp); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for timestamp")
	}
	return nil
}
